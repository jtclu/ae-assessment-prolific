{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-09-22T19:35:47.291354Z", "invocation_id": "65323b4b-12ec-44ec-aba6-cf7f16b88d9c", "invocation_started_at": "2025-09-22T19:35:44.685890Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:45.775807Z", "completed_at": "2025-09-22T19:35:45.782575Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:45.782948Z", "completed_at": "2025-09-22T19:35:45.816557Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04234480857849121, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_calendar_months", "compiled": true, "compiled_code": "-- calendar months from earliest transaction in dataset to current month\r\n\r\nwith \r\n    recursive month_series(report_month) as (\r\n\r\n        select '2024-01-01'\r\n\r\n        union all\r\n\r\n        -- recursively add 1 month until the end date is reached\r\n\r\n        select date(report_month, '+1 month')\r\n        from month_series\r\n        where \r\n            report_month <= date('now')\r\n),\r\n\r\nfinal as (\r\n    select \r\n        report_month \r\n    from month_series\r\n)\r\n\r\nselect * from final", "relation_name": "main_intermediate.\"int_calendar_months\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:45.823280Z", "completed_at": "2025-09-22T19:35:45.823283Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:45.823515Z", "completed_at": "2025-09-22T19:35:45.886408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06429362297058105, "adapter_response": {"_message": "INSERT 4", "code": "INSERT", "rows_affected": 4}, "message": "INSERT 4", "failures": null, "unique_id": "seed.global_transactions.client_contracts", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:45.889940Z", "completed_at": "2025-09-22T19:35:45.889943Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:45.890229Z", "completed_at": "2025-09-22T19:35:46.038586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.149796724319458, "adapter_response": {"_message": "INSERT 364", "code": "INSERT", "rows_affected": 364}, "message": "INSERT 364", "failures": null, "unique_id": "seed.global_transactions.currency_rates", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.043154Z", "completed_at": "2025-09-22T19:35:46.043156Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.043430Z", "completed_at": "2025-09-22T19:35:46.079631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03758835792541504, "adapter_response": {"_message": "INSERT 60", "code": "INSERT", "rows_affected": 60}, "message": "INSERT 60", "failures": null, "unique_id": "seed.global_transactions.transaction_resolutions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.083159Z", "completed_at": "2025-09-22T19:35:46.083161Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.083434Z", "completed_at": "2025-09-22T19:35:46.583499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5016849040985107, "adapter_response": {"_message": "INSERT 600", "code": "INSERT", "rows_affected": 600}, "message": "INSERT 600", "failures": null, "unique_id": "seed.global_transactions.transactions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.587163Z", "completed_at": "2025-09-22T19:35:46.592404Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.592961Z", "completed_at": "2025-09-22T19:35:46.612464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026486873626708984, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.stg_client_contracts", "compiled": true, "compiled_code": "with source as (\n\n    select * \n    from main.\"client_contracts\"\n),\n\nsrc_client_contracts as (\n\n    select\n        client_id,\n        date(contract_start_date) as contract_start_date,\n        contract_duration_months,\n        spend_threshold,\n        discounted_fee_margin\n\n    from source\n)\n\nselect * from src_client_contracts", "relation_name": "main_staging.\"stg_client_contracts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.616305Z", "completed_at": "2025-09-22T19:35:46.618949Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.619370Z", "completed_at": "2025-09-22T19:35:46.634163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01912856101989746, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.stg_currency_rates", "compiled": true, "compiled_code": "with source as (\n\n    select * \n    from main.\"currency_rates\"\n),\n\nsrc_currency_dates as (\n\n    select\n        currency,\n        exchange_rate_to_gbp,\n        date(rate_date) as rate_date\n\n    from source\n)\n\nselect * from src_currency_dates", "relation_name": "main_staging.\"stg_currency_rates\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.639491Z", "completed_at": "2025-09-22T19:35:46.643546Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.643963Z", "completed_at": "2025-09-22T19:35:46.659666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021531105041503906, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.stg_transaction_resolutions", "compiled": true, "compiled_code": "with source as (\n    select * from main.\"transaction_resolutions\"\n),\n\nsrc_transaction_resolutions as (\n    select\n        transaction_id,\n        resolution_status,\n        resolution_date\n\n    from source\n)\n\nselect * from src_transaction_resolutions", "relation_name": "main_staging.\"stg_transaction_resolutions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.665453Z", "completed_at": "2025-09-22T19:35:46.668471Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.669184Z", "completed_at": "2025-09-22T19:35:46.684585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020608186721801758, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.stg_transactions", "compiled": true, "compiled_code": "with source as (\n    select * from main.\"transactions\"\n),\n\nsrc_transactions as (\n    select\n        transaction_id,\n        client_id,\n        transaction_amount,\n        transaction_type,\n        date(transaction_date) as transaction_date,\n        platform_fee_margin,\n        currency,\n        linked_transaction_id\n        \n    from source\n)\n\nselect * from src_transactions", "relation_name": "main_staging.\"stg_transactions\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.690065Z", "completed_at": "2025-09-22T19:35:46.703992Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.704729Z", "completed_at": "2025-09-22T19:35:46.732392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.044979095458984375, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.not_null_stg_client_contracts_client_id.d721bd1379", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect client_id\nfrom main_staging.\"stg_client_contracts\"\nwhere client_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.737064Z", "completed_at": "2025-09-22T19:35:46.747374Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.748205Z", "completed_at": "2025-09-22T19:35:46.756819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021898746490478516, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.unique_stg_client_contracts_client_id.a423fec304", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    client_id as unique_field,\n    count(*) as n_records\n\nfrom main_staging.\"stg_client_contracts\"\nwhere client_id is not null\ngroup by client_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.763238Z", "completed_at": "2025-09-22T19:35:46.775599Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.776367Z", "completed_at": "2025-09-22T19:35:46.787194Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0263826847076416, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.dbt_utils_unique_combination_of_columns_stg_currency_rates_currency__rate_date.cd92523d07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        currency, rate_date\n    from main_staging.\"stg_currency_rates\"\n    group by currency, rate_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.791192Z", "completed_at": "2025-09-22T19:35:46.798571Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.799117Z", "completed_at": "2025-09-22T19:35:46.805400Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015846729278564453, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.not_null_stg_transaction_resolutions_transaction_id.6860d78136", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom main_staging.\"stg_transaction_resolutions\"\nwhere transaction_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.809834Z", "completed_at": "2025-09-22T19:35:46.816078Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.816669Z", "completed_at": "2025-09-22T19:35:46.824101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01676487922668457, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.unique_stg_transaction_resolutions_transaction_id.7059f155a2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom main_staging.\"stg_transaction_resolutions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.828636Z", "completed_at": "2025-09-22T19:35:46.835373Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.835775Z", "completed_at": "2025-09-22T19:35:46.845109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018468618392944336, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.dbt_utils_unique_combination_of_columns_stg_transactions_transaction_id__transaction_type.18c67a3b4a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, transaction_type\n    from main_staging.\"stg_transactions\"\n    group by transaction_id, transaction_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.851238Z", "completed_at": "2025-09-22T19:35:46.855245Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.855619Z", "completed_at": "2025-09-22T19:35:46.867189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017965078353881836, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.not_null_stg_transactions_transaction_id.1d00a8e2e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom main_staging.\"stg_transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.870728Z", "completed_at": "2025-09-22T19:35:46.875157Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.875823Z", "completed_at": "2025-09-22T19:35:46.885200Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01594853401184082, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.unique_stg_transactions_transaction_id.ee9a78a396", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom main_staging.\"stg_transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.889522Z", "completed_at": "2025-09-22T19:35:46.892891Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.893562Z", "completed_at": "2025-09-22T19:35:46.910607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02250504493713379, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_currency_rates", "compiled": true, "compiled_code": "-- slowly changing dimension of currency conversion rates to GBP\n\nwith staging as (\n    select * from main_staging.\"stg_currency_rates\"\n),\n\ncurrency_history as (\n    select\n        currency,\n        exchange_rate_to_gbp,\n        rate_date as valid_from,\n        lead(rate_date) over (\n            partition by currency \n            order by rate_date asc\n        ) as valid_to\n\n    from staging\n),\n\nfinal as (\n    select\n        currency,\n        exchange_rate_to_gbp,\n        valid_from,\n        coalesce(valid_to, date('9999-12-31')) as valid_to\n\n    from currency_history\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_currency_rates\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.915956Z", "completed_at": "2025-09-22T19:35:46.919476Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.919827Z", "completed_at": "2025-09-22T19:35:46.934142Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01947927474975586, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_clients", "compiled": true, "compiled_code": "-- all clients in dataset, plus contract detail lookup where applicable\n-- assume clients transact both in & out of contract and may enter multiple contracts throughout lifetime\n-- for ease of use this will be a cartesian join with rows for each client/reporting month combination, with contract months & attributes flagged\n-- advantage: simple to add new column flagging useful aggregates downstream e.g. transaction count or cumulative value per client month\n-- disadvantage: grain currently fine for sample data but may run into performance issue if dataset becomes large\n\n-- first construct a spine contraining all known clients on a monthly view\n\nwith all_clients as (\n\n    select distinct \n        client_id\n    from main_staging.\"stg_transactions\"\n\n    union\n\n    select\n        client_id\n    from main_staging.\"stg_client_contracts\"\n),\n\nclient_timeline as (\n\n    select\n        report_month, \n        client_id\n\n    from all_clients\n    cross join \n        main_intermediate.\"int_calendar_months\" \n),\n\ncontract_details as (\n\n    select  \n        client_id,\n        contract_start_date,\n        date(\n            contract_start_date,\n            '+' || contract_duration_months || ' months'\n        ) as contract_end_date,\n        spend_threshold, -- assume GBP equivalent and is cumulative maximum spend that the discount is applicable to during the contract\n        discounted_fee_margin\n\n    from main_staging.\"stg_client_contracts\" \n),\n\n-- contract status during month\nclient_monthly_attribute as (\n\n    select  \n        client_timeline.client_id,\n        client_timeline.report_month,\n        case\n            when contract_details.contract_start_date is not null then true\n            else false\n        end as is_in_contract,\n        contract_details.spend_threshold, -- assume GBP equivalent and is cumulative maximum spend that the discount is applicable to\n        contract_details.discounted_fee_margin\n\n    from client_timeline\n    left join contract_details\n        on client_timeline.client_id = contract_details.client_id\n        and client_timeline.report_month >= contract_details.contract_start_date\n        and client_timeline.report_month < contract_details.contract_end_date\n),\n\nfinal as (\n\n    select\n        client_id,\n        report_month,\n        is_in_contract,\n        spend_threshold, -- only populated if is_in_contract = true\n        discounted_fee_margin -- only populated if is_in_contract = true\n\n    from client_monthly_attribute\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_clients\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.938287Z", "completed_at": "2025-09-22T19:35:46.942286Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.943181Z", "completed_at": "2025-09-22T19:35:46.959523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022665023803710938, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_transactions_chargebacks", "compiled": true, "compiled_code": "-- transactions representing chargebacks only\n\nwith staging as (\n\n    select * from main_staging.\"stg_transactions\"\n),\n\ntype_filter as (\n\n    select *\n    from staging\n    where \n        transaction_type = 'chargeback'\n),\n\nfx_conversion as (\n\n    select\n        type_filter.*,\n        rate.exchange_rate_to_gbp,\n        round(type_filter.transaction_amount * rate.exchange_rate_to_gbp, 2) as transaction_amount_gbp\n\n    from type_filter\n    left join main_intermediate.\"int_currency_rates\" as rate\n        on type_filter.currency = rate.currency\n        and type_filter.transaction_date >= rate.valid_from\n        and type_filter.transaction_date < rate.valid_to\n),\n\nchargeback_status as (\n\n    select\n        fx_conversion.*,\n        resolution.resolution_status, \n        resolution.resolution_date\n\n    from fx_conversion\n    left join main_staging.\"stg_transaction_resolutions\" as resolution\n        on fx_conversion.transaction_id = resolution.transaction_id\n),\n\nfinal as (\n    \n    select\n        transaction_id as chargeback_transaction_id,\n        client_id,\n        transaction_date as chargeback_transaction_date,\n        currency as chargeback_transaction_currency,\n        transaction_amount as chargeback_transaction_amount,\n        transaction_amount_gbp as chargeback_transaction_amount_gbp,\n        platform_fee_margin,\n        resolution_status as chargeback_status, -- pending or resolved\n        resolution_date as chargeback_applicable_date\n\n    from chargeback_status\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_transactions_chargebacks\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.965279Z", "completed_at": "2025-09-22T19:35:46.968913Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.969513Z", "completed_at": "2025-09-22T19:35:46.984270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020556926727294922, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_transactions_fraud", "compiled": true, "compiled_code": "-- transactions representing fraud\n\nwith staging as (\n\n    select * from main_staging.\"stg_transactions\"\n),\n\ntype_filter as (\n\n    select *\n    from staging\n    where \n        transaction_type = 'fraud'\n),\n\nfx_conversion as (\n\n    select\n        type_filter.*,\n        rate.exchange_rate_to_gbp,\n        round(type_filter.transaction_amount * rate.exchange_rate_to_gbp, 2) as transaction_amount_gbp\n\n    from type_filter\n    left join main_intermediate.\"int_currency_rates\" as rate\n        on type_filter.currency = rate.currency\n        and type_filter.transaction_date >= rate.valid_from\n        and type_filter.transaction_date < rate.valid_to\n),\n\nfinal as (\n    \n    select\n        transaction_id as fraud_transaction_id,\n        client_id,\n        transaction_date as fraud_transaction_date,\n        currency as fraud_transaction_currency,\n        transaction_amount as fraud_transaction_amount,\n        transaction_amount_gbp as fraud_transaction_amount_gbp\n\n    from fx_conversion\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_transactions_fraud\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:46.988403Z", "completed_at": "2025-09-22T19:35:46.992288Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:46.992902Z", "completed_at": "2025-09-22T19:35:47.017668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03044605255126953, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_transactions_payments", "compiled": true, "compiled_code": "-- transactions that represent gross payments\n\nwith staging as (\n    \n    select * from main_staging.\"stg_transactions\"\n),\n\ntype_filter as (\n\n    select *\n    from staging\n    where \n        transaction_type = 'payment'\n),\n\n-- apply GBP equivalent amount on each transaction\n\nfx_conversion as (\n\n    select\n        type_filter.*,\n        rate.exchange_rate_to_gbp,\n        round(type_filter.transaction_amount * rate.exchange_rate_to_gbp, 2) as transaction_amount_gbp\n\n    from type_filter    \n    left join main_intermediate.\"int_currency_rates\" as rate\n        on type_filter.currency = rate.currency\n        and type_filter.transaction_date >= rate.valid_from\n        and type_filter.transaction_date < rate.valid_to\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        linked_transaction_id, -- refunds\n        client_id,\n        transaction_date,\n        currency as transaction_currency,\n        transaction_amount,\n        transaction_amount_gbp,\n        platform_fee_margin\n \n    from fx_conversion\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_transactions_payments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.021654Z", "completed_at": "2025-09-22T19:35:47.025314Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.025883Z", "completed_at": "2025-09-22T19:35:47.042275Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02263808250427246, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_transactions_refunds", "compiled": true, "compiled_code": "with staging as (\n\n    select * from main_staging.\"stg_transactions\"\n),\n\ntype_filter as (\n\n    select *\n    from staging\n    where \n        transaction_type = 'refund'\n),\n\nfx_conversion as (\n    select\n        type_filter.*,\n        rate.exchange_rate_to_gbp,\n        round(type_filter.transaction_amount * rate.exchange_rate_to_gbp, 2) as transaction_amount_gbp\n\n    from type_filter\n    \n    left join main_intermediate.\"int_currency_rates\" as rate\n        on type_filter.currency = rate.currency\n        and type_filter.transaction_date >= rate.valid_from\n        and type_filter.transaction_date < rate.valid_to\n),\n\nfinal as (\n    select\n        transaction_id as refund_transaction_id,\n        client_id,\n        transaction_date as refund_transaction_date,\n        currency as refund_transaction_currency,\n        transaction_amount as refund_transaction_amount,\n        transaction_amount_gbp as refund_transaction_amount_gbp,\n        platform_fee_margin\n\n    from fx_conversion\n)\n\nselect * from final", "relation_name": "main_intermediate.\"int_transactions_refunds\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.048022Z", "completed_at": "2025-09-22T19:35:47.054274Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.054766Z", "completed_at": "2025-09-22T19:35:47.066181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02007150650024414, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.dbt_utils_unique_combination_of_columns_int_clients_client_id__report_month.c47d9a6608", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        client_id, report_month\n    from main_intermediate.\"int_clients\"\n    group by client_id, report_month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.070570Z", "completed_at": "2025-09-22T19:35:47.073714Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.074065Z", "completed_at": "2025-09-22T19:35:47.089683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02064800262451172, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.int_transactions_recognised", "compiled": true, "compiled_code": "-- bring together only transaction types that will end up in the topline gmv and revenue calculation\n\nwith recognised_transactions as ( \n\n    select \n        transaction_id,\n        client_id,\n        transaction_date,\n        transaction_amount,\n        transaction_amount_gbp,\n        platform_fee_margin,\n        'payments' as transaction_type\n\n    from main_intermediate.\"int_transactions_payments\"\n\n    union all\n\n    select \n        chargeback_transaction_id as transaction_id,\n        client_id,\n        chargeback_transaction_date as transaction_date,\n        chargeback_transaction_amount as transaction_amount,\n        chargeback_transaction_amount_gbp as transaction_amount_gbp,\n        platform_fee_margin,\n        'resolved chargeback' as transaction_type\n\n    from main_intermediate.\"int_transactions_chargebacks\"\n    where\n        chargeback_status = 'resolved'\n),\n\nfinal as (\n\n    select \n        transaction_id,\n        client_id,\n        transaction_date,\n        transaction_amount,\n        transaction_amount_gbp,\n        platform_fee_margin,\n        transaction_type\n\n    from recognised_transactions\n)\n\nselect *\nfrom final", "relation_name": "main_intermediate.\"int_transactions_recognised\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.095103Z", "completed_at": "2025-09-22T19:35:47.103622Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.104203Z", "completed_at": "2025-09-22T19:35:47.115780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022269010543823242, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.relationships_int_transactions_payments_linked_transaction_id__refund_transaction_id__ref_int_transactions_refunds_.203236a1c4", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select linked_transaction_id as from_field\n    from main_intermediate.\"int_transactions_payments\"\n    where linked_transaction_id is not null\n),\n\nparent as (\n    select refund_transaction_id as to_field\n    from main_intermediate.\"int_transactions_refunds\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.119550Z", "completed_at": "2025-09-22T19:35:47.123064Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.123566Z", "completed_at": "2025-09-22T19:35:47.138737Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02026534080505371, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.dim_clients_monthly", "compiled": true, "compiled_code": "-- slow change monthly grain snapshot of client's spend to date\n\nwith client_monthly_attributes as (\n\n    select *\n    from main_intermediate.\"int_clients\"\n),\n\ntransaction_value_in_month as ( \n\n    select \n        client_id,\n        date(transaction_date, 'start of month') as transaction_month,\n        sum(transaction_amount_gbp) as cumulative_transaction_value_in_month\n\n    from main_intermediate.\"int_transactions_recognised\"\n),\n\nclient_monthly_with_gmv as (\n\n    select\n        client_monthly_attributes.client_id,\n        client_monthly_attributes.report_month,\n        client_monthly_attributes.is_in_contract,\n        transaction_value_in_month.cumulative_transaction_value_in_month\n\n    from client_monthly_attributes\n    left join transaction_value_in_month\n        on client_monthly_attributes.client_id = transaction_value_in_month.client_id\n        and client_monthly_attributes.report_month = transaction_value_in_month.transaction_month\n),\n\n-- add any other client attributes that can be used to segment client base for targeted campaigns\n\nfinal as (\n\n    select\n        client_id,\n        report_month,\n        is_in_contract,\n        cumulative_transaction_value_in_month\n\n    from client_monthly_with_gmv\n)\n\nselect *\nfrom final", "relation_name": "main_marts.\"dim_clients_monthly\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.143018Z", "completed_at": "2025-09-22T19:35:47.147236Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.148082Z", "completed_at": "2025-09-22T19:35:47.164245Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023174285888671875, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.fact_transactions", "compiled": true, "compiled_code": "-- keeps original grain so can be easily reused for fk dim joins (eg. client) + different reporting timeframe aggregations\n\nwith recognised_transactions as ( \n\n    select \n        *,\n        date(transaction_date, 'start of month') as transaction_month\n\n    from main_intermediate.\"int_transactions_recognised\"\n), \n\n-- if discounts should apply, transaction must take place during contract month and not exceed spending threshold\n\nclient_contract_status as (\n\n    select\n        recognised_transactions.*,\n        contracts.is_in_contract,\n        contracts.spend_threshold, \n        contracts.discounted_fee_margin \n\n    from recognised_transactions\n    left join main_intermediate.\"int_clients\" as contracts\n        on recognised_transactions.client_id = contracts.client_id\n        and recognised_transactions.transaction_month = contracts.report_month\n),\n\nspend_threshold as (\n\n    select\n        *,\n        case\n            when is_in_contract is true then\n                sum(transaction_amount_gbp) over(\n                    partition by client_id\n                    order by transaction_date asc\n                    rows between unbounded preceding and 1 preceding\n                ) \n            when is_in_contract is false then null\n        end as cumulative_contract_spend\n\n    from client_contract_status\n),\n\ndiscount_applicable as (\n\n    select \n        *,\n        case\n            when is_in_contract is true \n                and cumulative_contract_spend < spend_threshold \n            then true\n            else false\n        end as discount_is_applicable\n\n    from spend_threshold\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        client_id,\n        transaction_date,\n        transaction_amount_gbp,\n        transaction_type, \n        case\n            when discount_is_applicable is true \n            then discounted_fee_margin\n            else platform_fee_margin\n        end as platform_fee_margin\n        \n    from discount_applicable\n)\n\nselect *\nfrom final", "relation_name": "main_marts.\"fact_transactions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.169789Z", "completed_at": "2025-09-22T19:35:47.173053Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.173544Z", "completed_at": "2025-09-22T19:35:47.188620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019993066787719727, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.vw_gross_merchandise_value_monthly", "compiled": true, "compiled_code": "-- topline gmv aggregated by month & client\n-- transaction values in GBP before fees & refunds\n\nwith gross_merchandise_value as (\n\n    select *\n    from main_intermediate.\"int_transactions_recognised\"\n),\n\ngmv_by_month as (\n    \n    select \n        strftime('%Y-%m-01', transaction_date) as transaction_month,\n        sum(transaction_amount_gbp) as total_gmv_gbp\n    \n    from gross_merchandise_value\n    group by \n        1\n), \n\n-- ensure there are no gaps for time series reporting\n\ndatespine_join as (\n\n    select\n        spine.report_month,\n        coalesce(\n            gmv_by_month.total_gmv_gbp,\n            0\n        ) as total_gmv_gbp\n\n    from main_intermediate.\"int_calendar_months\" as spine\n    left join gmv_by_month\n        on spine.report_month = gmv_by_month.transaction_month\n),\n\nfinal as (\n\n    select \n        report_month,\n        total_gmv_gbp\n    from datespine_join\n)\n\nselect *\nfrom final", "relation_name": "main_marts.\"vw_gross_merchandise_value_monthly\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.193425Z", "completed_at": "2025-09-22T19:35:47.199393Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.199824Z", "completed_at": "2025-09-22T19:35:47.208048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016585111618041992, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.not_null_fact_transactions_transaction_id.e79bae8750", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom main_marts.\"fact_transactions\"\nwhere transaction_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.213683Z", "completed_at": "2025-09-22T19:35:47.217971Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.218393Z", "completed_at": "2025-09-22T19:35:47.226840Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015309572219848633, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.unique_fact_transactions_transaction_id.4978e2a484", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom main_marts.\"fact_transactions\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.233946Z", "completed_at": "2025-09-22T19:35:47.237558Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.238020Z", "completed_at": "2025-09-22T19:35:47.251910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019463777542114258, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": "OK", "failures": null, "unique_id": "model.global_transactions.vw_revenue_by_client_monthly", "compiled": true, "compiled_code": "-- monthly aggregate view per client\n-- assumes gmv and revenue are recognised before deducting refunds in expense lines -- ignores linked transactions & frauds\n\n-- start with transaction value x correct fee (adjusting for discounts & thresholds)\n\nwith fees_collectable as (\n\n    select \n        *,\n        transaction_amount_gbp * platform_fee_margin as fees_applicable_gbp\n\n    from main_marts.\"fact_transactions\"\n),\n\nrevenue_client_monthly as ( \n\n    select \n        strftime('%Y-%m-01', transaction_date) as revenue_month,\n        client_id,\n        sum(fees_applicable_gbp) as total_revenue_in_month\n\n    from fees_collectable\n    group by\n        1, 2    \n),\n\n-- date spine for reporting view\ndatespine_view as ( \n\n    select \n        datespine.report_month,\n        revenue_client_monthly.client_id,\n        revenue_client_monthly.total_revenue_in_month\n\n    from main_intermediate.\"int_calendar_months\" as datespine\n    left join revenue_client_monthly    \n        on datespine.report_month = revenue_client_monthly.revenue_month\n),\n\nfinal as (\n    \n    select \n        report_month,\n        client_id,\n        round(total_revenue_in_month, 2) as total_revenue_in_month\n    from datespine_view\n)\n\nselect * from final", "relation_name": "main_marts.\"vw_revenue_by_client_monthly\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-09-22T19:35:47.256061Z", "completed_at": "2025-09-22T19:35:47.264078Z"}, {"name": "execute", "started_at": "2025-09-22T19:35:47.265194Z", "completed_at": "2025-09-22T19:35:47.276963Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022799015045166016, "adapter_response": {"_message": "OK", "rows_affected": -1}, "message": null, "failures": 0, "unique_id": "test.global_transactions.dbt_utils_unique_combination_of_columns_vw_revenue_by_client_monthly_client_id__report_month.992f813f0b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        client_id, report_month\n    from main_marts.\"vw_revenue_by_client_monthly\"\n    group by client_id, report_month\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 1.7292609214782715, "args": {"source_freshness_run_project_hooks": true, "macro_debugging": false, "require_yaml_configuration_for_mf_time_spines": false, "cache_selected_only": false, "state_modified_compare_more_unrendered_values": false, "favor_state": false, "introspect": true, "require_nested_cumulative_type_params": false, "show_all_deprecations": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_file_max_bytes": 10485760, "use_colors": true, "write_json": true, "send_anonymous_usage_stats": true, "require_resource_names_without_spaces": true, "partial_parse_file_diff": true, "exclude": [], "profiles_dir": "C:\\Users\\umami\\Repos\\ae-assessment-prolific", "upload_to_artifacts_ingest_api": false, "log_path": "C:\\Users\\umami\\Repos\\ae-assessment-prolific\\logs", "export_saved_queries": false, "require_batched_execution_for_custom_microbatch_strategy": false, "populate_cache": true, "indirect_selection": "eager", "require_all_warnings_handled_by_warn_error": false, "exclude_resource_types": [], "printer_width": 80, "warn_error_options": {"error": [], "warn": [], "silence": []}, "skip_nodes_if_on_run_start_fails": false, "log_level_file": "debug", "defer": false, "strict_mode": false, "partial_parse": true, "log_level": "info", "project_dir": "C:\\Users\\umami\\Repos\\ae-assessment-prolific", "print": true, "resource_types": [], "quiet": false, "select": [], "log_format": "default", "require_generic_test_arguments_property": true, "show_resource_report": false, "empty": false, "show": false, "vars": {}, "include_saved_query": false, "use_fast_test_edges": false, "version_check": true, "log_format_file": "debug", "validate_macro_args": false, "static_parser": true, "invocation_command": "dbt build", "state_modified_compare_vars": false, "which": "build", "use_colors_file": true}}